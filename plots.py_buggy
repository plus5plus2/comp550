import matplotlib.pyplot as plt

plt.subplot(111)
plt.title("Epoch")
cl, = plt.plot([1,2,3,5,10,15,20,25,30], [0.6033,0.6649,0.6728,0.6898,0.6876,0.6944,0.6946,0.6920,0.6682], 'bo')
sl, = plt.plot([1,2,3,5,10,15,20,25,30], [0.6340,0.6676,0.6741,0.6777,0.6785,0.6816,0.6795,0.6785,0.6854], 'ro')
acl,= plt.plot([1,2,3,5,10,15,20,25,30], [0.845000,0.843750,0.844000,0.847250,0.848750,0.836750,0.841750,0.837500,0.821750],'bx')
asl,= plt.plot([1,2,3,5,10,15,20,25,30], [0.844750,0.845500,0.845500,0.841500,0.844750,0.846500,0.846500,0.835250,0.841250],'rx')

plt.xlabel("number of epochs")
plt.ylabel("test accuracy")
plt.axis([0, 30, 0.5, 1])
plt.legend([cl,sl,acl,asl],["convolutional-lstm-imdb","standard-lstm-imdb","convolutional-lstm-aff","standard-lstm-aff"])
plt.savefig('plt_epock.png', bbox_inches='tight')
plt.show()

plt.subplot(111)
plt.title("Batch Size")
cl, = plt.plot([500,400,300,200,100,50,30], [0.6378,0.6381,0.6267,0.6535,0.6491,0.6568,0.6202], 'bo')
sl, = plt.plot([500,400,300,200,100,50,30], [0.5678,0.6119,0.6407,0.6560,0.6708,0.6620,0.6457], 'ro')
acl,= plt.plot([500,400,300,200,100,50,30], [0.845500,0.843000,0.843000,0.844500,0.839250,0.842000,0.842250],'bx')
asl,= plt.plot([500,400,300,200,100,50,30], [0.839500,0.844250,0.845250,0.844000,0.844000,0.846000,0.848750],'rx')

plt.xlabel("batch size")
plt.ylabel("test accuracy")
plt.axis([0,600, 0.5, 1])
plt.legend([cl,sl,acl,asl],["convolutional-lstm-imdb","standard-lstm-imdb","convolutional-lstm-aff","standard-lstm-aff"])
plt.savefig('plt_batch.png', bbox_inches='tight')
plt.show()

plt.subplot(111)
plt.title("Hidden Layers")
cl, = plt.plot([1,2,3,4,5], [0.6626,0.6381,0.6691,0.6311,0.5766], 'bo')
sl, = plt.plot([1,2,3,4,5], [0.6569,0.6694,0.6662,0.6685,0.6523], 'ro')
acl,= plt.plot([1,2,3,4,5], [0.846750,0.846250,0.846000,0.845500,0.845250],'bx')
asl,= plt.plot([1,2,3,4,5], [0.844500,0.842750,0.845500,0.843250,0.845500],'rx')

plt.xlabel("number of layers")
plt.ylabel("test accuracy")
plt.axis([0,7, 0.5, 1])
plt.legend([cl,sl,acl,asl],["convolutional-lstm-imdb","standard-lstm-imdb","convolutional-lstm-aff","standard-lstm-aff"])
plt.savefig('plt_layers.png', bbox_inches='tight')
plt.show()

plt.subplot(111)
plt.title("LSTM Neurals")
cl, = plt.plot([2,4,8,16,32,64,128,256,512,1024], [0.6096,0.6230,0.6494,0.6480,0.6497,0.6571,0.6643,0.6586,0.6116,0.6141], 'bo')
sl, = plt.plot([2,4,8,16,32,64,128,256,512,1024], [0.6173,0.6475,0.6365,0.6494,0.6607,0.6384,0.6699,0.6286,0.6059,0.5762], 'ro')
acl,= plt.plot([2,4,8,16,32,64,128,256,512,1024], [0.847750,0.845750,0.843000,0.844250,0.839750,0.843000,0.847500,0.842000,0.845250,0.845000],'bx')
asl,= plt.plot([2,4,8,16,32,64,128,256,512,1024], [0.847500,0.838750,0.847000,0.843250,0.844750,0.845500,0.840500,0.841750,0.842750,0.842500],'rx')

plt.xlabel("number of neurals")
plt.ylabel("test accuracy")
plt.axis([0,1200, 0.5, 1])
plt.legend([cl,sl,acl,asl],["convolutional-lstm-imdb","standard-lstm-imdb","convolutional-lstm-aff","standard-lstm-aff"])
plt.savefig('plt_neurals.png', bbox_inches='tight')
plt.show()

plt.subplot(111)
plt.title("training sample")
cl, = plt.plot([100,1000,2000,4000,6000,8000,10000,15000,20000,25000], [0.5027,0.5304,0.5076,0.5392,0.6604,0.6619,0.6646,0.6774,0.6804,0.6889], 'bo')
sl, = plt.plot([100,1000,2000,4000,6000,8000,10000,15000,20000,25000], [0.5027,0.5346,0.5617,0.6171,0.6448,0.6276,0.6701,0.6538,0.6828,0.6633], 'ro')
acl,= plt.plot([100,1000,2000,4000,6000,8000,10000,15000,20000,25000], [0.843500,0.840750,0.844750,0.842250,0.846250,0.840250,0.846000,0.846750,0.848250,0.844000],'bx')
asl,= plt.plot([100,1000,2000,4000,6000,8000,10000,15000,20000,25000], [0.845750,0.840250,0.844750,0.843500,0.843750,0.845250,0.845000,0.842500,0.843000,0.846250],'rx')

plt.xlabel("number of training samples")
plt.ylabel("test accuracy")
plt.axis([0,28000, 0.5, 1])
plt.legend([cl,sl,acl,asl],["convolutional-lstm-imdb","standard-lstm-imdb","convolutional-lstm-aff","standard-lstm-aff"])
plt.savefig('plt_training.png', bbox_inches='tight')
plt.show()

